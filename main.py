import os
import logging
import asyncio
from datetime import datetime, timedelta

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from auto_loop import reminder_loop, update_data_in_google_sheet
from db import select_user, insert_reminders, replace_user, get_user_modules, \
    update_user, get_lesson_schedule, update_reminders, clear_user, update_role, get_modules_from_db, \
    get_directions_from_db
from google_docs import cmd_reminders_google_sheet, sync_module_dates

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher(bot)


@dp.callback_query_handler(lambda c: c.data == "finish")
async def finish_selection(callback_query: types.CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥—É–ª–µ–π –∏ —Å–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = callback_query.from_user.id

    user_info = await select_user(user_id)
    if user_info is None:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
        return

    selected_modules = []
    if user_info[2]:
        selected_modules = user_info[2].split(",")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥—É–ª–∏ –∏–∑ –±–∞–∑—ã

    lessons = await get_lesson_schedule(selected_modules)

    modules = await get_modules_from_db()

    # –°–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for lesson_time, module in lessons:
        lesson_dt = datetime.strptime(lesson_time, "%Y-%m-%d %H:%M") - timedelta(hours=1)
        await insert_reminders(user_id, lesson_dt.strftime("%Y-%m-%d %H:%M"),
                               f"üóìÔ∏è {modules[module][0]} –≤ {lesson_dt.strftime('%H:%M')}")

    await bot.delete_message(user_id, callback_query.message.message_id)
    await bot.send_message(user_id,
                           f"–ö–ª–∞—Å—Å, –±—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!\n"
                           f"–¢—ã –≤—ã–±—Ä–∞–ª:\n" + "\n".join(f"‚úî {modules[m][0]}" for m in selected_modules))
    if lessons:
        await bot.send_message(user_id,
                               "\n\n".join(f"üóìÔ∏è {lesson_time} - "
                                           f"{modules[module][0]}" for lesson_time, module in lessons))
    await bot.send_message(user_id, "–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö. ‚úÖ")


@dp.callback_query_handler(lambda c: c.data.startswith("remind_"))
async def handle_reminder_response(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    remind_status = callback_query.data.split("_")[1]

    user_id = callback_query.data.split("_")[2]
    remind_time = callback_query.data.split("_")[3]

    if remind_status == "come":
        await cmd_reminders_google_sheet(user_id, f"–î–∞", remind_time, "A:Z")
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –ñ–¥—ë–º —Ç–µ–±—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏. üéâ")
    elif remind_status == "skip":
        await cmd_reminders_google_sheet(user_id, f"–ù–µ—Ç", remind_time, "A:Z")
        await bot.send_message(callback_query.from_user.id, "–ñ–∞–ª—å! –ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º ‚Äî –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = message.from_user.id

    existing_user = await select_user(user_id)

    if existing_user:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="reset_account"))
        keyboard.add(InlineKeyboardButton("‚ùå –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="cancel_reset"))

        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?", reply_markup=keyboard)
        return

    directions = await get_directions_from_db()
    keyboard = InlineKeyboardMarkup()
    for key, name in directions.items():
        keyboard.add(InlineKeyboardButton(name, callback_data=f"dir_{key}_{name}"))

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫–∞–¥–µ–º–∏—é!\n–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã –≤—ã–±—Ä–∞–ª–∏?", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "reset_account")
async def reset_account(callback_query: types.CallbackQuery):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_id = callback_query.from_user.id

    await clear_user(user_id)

    await callback_query.answer("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
    await bot.delete_message(user_id, callback_query.message.message_id)
    await start(callback_query.message)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ

@dp.callback_query_handler(lambda c: c.data == "cancel_reset")
async def cancel_reset(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback_query.answer("–û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å! üéâ")

@dp.callback_query_handler(lambda c: c.data.startswith("dir_"))
async def choose_modules(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä –º–æ–¥—É–ª–µ–π –ø–æ—Å–ª–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.full_name
    user_tg_username = callback_query.from_user.username
    direction_key = callback_query.data.split("_")[1]
    direction_name = callback_query.data.split("_")[2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await replace_user(user_id, user_name, user_tg_username, direction_key)

    modules = await get_modules_from_db()
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
    available_modules = [
        (key, name) for key, (name, restrictions) in modules.items()
        if direction_key not in restrictions
    ]

    required_modules_names = []
    required_modules = []
    for module, (name, roles) in modules.items():
        if any(role in direction_key for role in roles):
            required_modules_names.append(name)
            required_modules.append(module)

    await update_user(user_id, required_modules)

    keyboard = InlineKeyboardMarkup(row_width=2)
    for key, name in available_modules:
        keyboard.add(InlineKeyboardButton(name, callback_data=f"mod_{key}"))

    keyboard.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish"))

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id,
                           f"–í—ã –≤—ã–±—Ä–∞–ª–∏ üö¶ {direction_name} üö¶\n\n"
                           f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π.\n"
                           f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: {', '.join(required_modules_names)}",
                           reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith("mod_"))
async def select_module(callback_query: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è"""
    user_id = callback_query.from_user.id
    module_key = callback_query.data.split("_")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    user_info = await select_user(user_id)
    if not user_info:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_modules = await get_user_modules(user_id)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º)
    if module_key in selected_modules:
        selected_modules.remove(module_key)
    else:
        selected_modules.append(module_key)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_user(user_id, selected_modules)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥—É–ª–µ–π
    direction_key = user_info[1]
    modules = await get_modules_from_db()
    available_modules = [
        (key, name) for key, (name, restrictions) in modules.items()
        if direction_key not in restrictions
    ]

    keyboard = InlineKeyboardMarkup(row_width=2)
    for key, name in available_modules:
        is_selected = "‚úÖ" if key in selected_modules else ""
        keyboard.add(InlineKeyboardButton(f"{is_selected} {name}", callback_data=f"mod_{key}"))

    keyboard.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish"))

    await bot.edit_message_reply_markup(callback_query.from_user.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)

@dp.message_handler(commands=['admin'])
async def admin_command(message: types.Message):
    user_id = message.from_user.id

    password = message.text.split()[1]

    if password == os.getenv("ADMIN_PASSWORD"):
        await bot.send_message(user_id, "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await update_role(user_id, "admin")

    await bot.delete_message(message.from_user.id, message.message_id)



if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(reminder_loop())
    loop.create_task(update_reminders())
    loop.create_task(update_data_in_google_sheet())
    loop.create_task(sync_module_dates())
    executor.start_polling(dp, skip_updates=True)