import os
import logging
import asyncio
from datetime import datetime

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardButton, InlineKeyboardMarkup

from db import select_reminders, delete_reminder, select_user, insert_reminders

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher(bot)

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
DIRECTIONS = {
    "press": "–ü—Ä–µ—Å—Å–∞",
    "photo": "–§–æ—Ç–æ–≥—Ä–∞—Ñ—ã",
    "video": "–í–∏–¥–µ–æ–≥—Ä–∞—Ñ—ã",
    "coord": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã",
    "guest": "–Ø –≥–æ—Å—Ç—å"
}

# –ú–æ–¥—É–ª–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
MODULES = {
    "interview": ("–ò–Ω—Ç–µ—Ä–≤—å—é –∏ —Ä–µ–¥–∞–∫—Ç—É—Ä–∞", ["press"]),
    "speech": ("–†–∞–±–æ—Ç–∞ —Å —Ä–µ—á—å—é", ["press"]),
    "photo": ("–§–æ—Ç–æ", ["photo"]),
    "promotion": ("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", ["photo", "video"]),
    "video": ("–í–∏–¥–µ–æ", ["video"]),
    "directing": ("–†–µ–∂–∏—Å—Å—É—Ä–∞", ["video"]),
    "inclusion": ("–ò–Ω–∫–ª—é–∑–∏—è", ["coord"]),
    "events": ("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", ["coord"]),
    "fixiki": ("–§–∏–∫—Å–∏–∫–∏", [])
}

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π (–º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –ë–î)
LESSON_SCHEDULE = {
    "interview": "2025-02-10 18:00",
    "speech": "2025-02-11 19:00",
    "photo": "2025-02-12 17:30",
    "promotion": "2025-02-13 16:00",
    "video": "2025-02-14 15:00",
    "directing": "2025-02-15 18:00",
    "inclusion": "2025-02-16 17:00",
    "events": "2025-02-17 19:00",
    "fixiki": "2025-02-7 12:39",
}

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
REQUIRED_MODULES = ["–ü–µ—Ä–≤–∞—è –ü–æ–º–æ—â—å", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"]

REMINDER_BUTTONS = InlineKeyboardMarkup().add(
    InlineKeyboardButton("‚úÖ –ü—Ä–∏–¥—É", callback_data="remind_come"),
    InlineKeyboardButton("‚ùå –ù–µ —Å–º–æ–≥—É", callback_data="remind_skip")
)

async def reminder_loop():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        reminders_to_send = await select_reminders(now)

        for reminder_id, user_id, text in reminders_to_send:
            await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}", reply_markup=REMINDER_BUTTONS)
            await delete_reminder(reminder_id)

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

@dp.callback_query_handler(lambda c: c.data == "finish")
async def finish_selection(callback_query: types.CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥—É–ª–µ–π –∏ —Å–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = callback_query.from_user.id

    user_info = await select_user(user_id)
    if user_info is None:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
        return

    selected_modules = user_info[2].split(",")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥—É–ª–∏ –∏–∑ –±–∞–∑—ã
    all_modules = ["–ü–µ—Ä–≤–∞—è –ü–æ–º–æ—â—å", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"] + [m for m in selected_modules if m in LESSON_SCHEDULE]

    # –°–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for module in all_modules:
        if module in LESSON_SCHEDULE:
            lesson_time = datetime.strptime(LESSON_SCHEDULE[module], "%Y-%m-%d %H:%M")
            await insert_reminders(user_id, lesson_time.strftime("%Y-%m-%d %H:%M"),
                                   f"üóìÔ∏è {MODULES[module][0]} –≤ {lesson_time.strftime('%H:%M')}")


    await bot.send_message(user_id,
                           f"–ö–ª–∞—Å—Å, –±—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!\n"
                           f"–¢—ã –≤—ã–±—Ä–∞–ª:\n" + "\n".join(f"‚úî {MODULES[m][0]}" for m in selected_modules))

    await bot.send_message(user_id, "–Ø –¥–æ–±–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö. ‚úÖ")


@dp.callback_query_handler(lambda c: c.data.startswith("remind_"))
async def handle_reminder_response(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    if callback_query.data == "remind_come":
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –ñ–¥—ë–º —Ç–µ–±—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏. üéâ")
    elif callback_query.data == "remind_skip":
        await bot.send_message(callback_query.from_user.id, "–ñ–∞–ª—å! –ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º ‚Äî –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup()
    for key, name in DIRECTIONS.items():
        keyboard.add(InlineKeyboardButton(name, callback_data=f"dir_{key}"))

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫–∞–¥–µ–º–∏—é!\n–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã –≤—ã–±—Ä–∞–ª–∏?", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("dir_"))
async def choose_modules(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä –º–æ–¥—É–ª–µ–π –ø–æ—Å–ª–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback_query.from_user.id
    direction_key = callback_query.data.split("_")[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    user_data[user_id] = {"direction": direction_key, "modules": set()}

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
    available_modules = [
        (key, name) for key, (name, restrictions) in MODULES.items()
        if direction_key not in restrictions
    ]

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª–µ–π
    keyboard = InlineKeyboardMarkup(row_width=2)
    for key, name in available_modules:
        keyboard.add(InlineKeyboardButton(name, callback_data=f"mod_{key}"))

    keyboard.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish"))

    await bot.send_message(callback_query.from_user.id,
                           f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π.\n"
                           f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: {', '.join(REQUIRED_MODULES)}",
                           reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith("mod_"))
async def select_module(callback_query: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è"""
    user_id = callback_query.from_user.id
    module_key = callback_query.data.split("_")[1]

    if user_id not in user_data:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º)
    if module_key in user_data[user_id]["modules"]:
        user_data[user_id]["modules"].remove(module_key)
    else:
        user_data[user_id]["modules"].add(module_key)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥—É–ª–µ–π
    direction_key = user_data[user_id]["direction"]
    available_modules = [
        (key, name) for key, (name, restrictions) in MODULES.items()
        if direction_key not in restrictions
    ]

    keyboard = InlineKeyboardMarkup(row_width=2)
    for key, name in available_modules:
        is_selected = "‚úÖ" if key in user_data[user_id]["modules"] else ""
        keyboard.add(InlineKeyboardButton(f"{is_selected} {name}", callback_data=f"mod_{key}"))

    keyboard.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish"))

    await bot.edit_message_reply_markup(callback_query.from_user.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "finish")
async def finish_selection(callback_query: types.CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥—É–ª–µ–π"""
    user_id = callback_query.from_user.id

    if user_id not in user_data:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
        return

    selected_modules = [MODULES[m][0] for m in user_data[user_id]["modules"]]
    all_modules = REQUIRED_MODULES + selected_modules

    await bot.send_message(user_id,
                           f"–ö–ª–∞—Å—Å, –±—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è –Ω–∞ –ø–µ—Ä–≤–æ–º –∑–∞–Ω—è—Ç–∏–∏!\n"
                           f"–¢—ã –≤—ã–±—Ä–∞–ª:\n" + "\n".join(f"‚úî {mod}" for mod in all_modules))


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(reminder_loop())
    executor.start_polling(dp, skip_updates=True)